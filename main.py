import sqlite3
from aiogram import Dispatcher, executor, Bot, types
from aiogram.dispatcher import FSMContext
from states import Registration, GetProduct, Cart, Order, Settings, Search
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv, find_dotenv
from datetime import datetime, timedelta
import buttons as btns
import database
import logging
import states
import csv
import os


load_dotenv(find_dotenv())
logging.basicConfig(level=logging.INFO)
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())


delivery = f'–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ\n\n' \
           f''


about = f'–ú—ã - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π —Å–æ—é–∑–Ω–∏–∫ –≤ –º–∏—Ä–µ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π.\n' \
        f'–û–≥—Ä–æ–º–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —Ü–µ–Ω—ã, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥—ã—Ö–∞–µ—Ç—Å—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –≤–æ—Ç –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–∑—ã—Ä–∏.\n' \
        f'–î–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–º –∑–∞–±–æ—Ç—É –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ, –∏ –æ–Ω –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n'\
        f'–ê–¥—Ä–µ—Å: –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω. –¢–∞—à–∫–µ–Ω—Ç. 2020 - 2023\n' \

contacts = f'üìû –ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n +998990952992 –∏ +998990902992\n\n'\
            f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –≤ Telegram: @SKODAVWXpress\n\n' \
            f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @ms2992\n\n'\
            f'üöö –ú—ã —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≥–æ—Ä–æ–¥—É.\n\n'\
            f'–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π.'\


@dp.message_handler(commands=['start'], state='*')
async def start_message(message):
    start_txt = f'{message.from_user.first_name}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç SKODA VW PartsXpress!'
    start_reg = f'–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:'

    user_id = message.from_user.id
    checker = database.check_user(user_id)

    if user_id == 5928000362:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                             reply_markup=btns.admin_kb())
        await states.Admin.get_status.set()

    elif checker:
        await message.answer('\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç SKODA VW PartsXpress!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.',
                             reply_markup=btns.main_menu())

    else:
        await message.answer(start_txt)
        await message.answer(start_reg,
                             reply_markup=btns.ReplyKeyboardMarkup())

        await states.Registration.getting_name_state.set()


@dp.message_handler(commands=['show_users'])
async def show_users(message: types.Message):
    admin_id = 5928000362

    if message.from_user.id != admin_id:
        response = "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        await message.answer(response)
        return

    users = database.get_users()

    if users:

        with open('users.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Username"])

            for user in users:
                writer.writerow([user[0], user[1], user[2]])

        with open('users.csv', 'rb') as file:
            await message.bot.send_document(admin_id, file)

        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ users.csv –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    else:
        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."

    await message.answer(response)


@dp.message_handler(state=Search.search_product, content_types=['text'])
async def search(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if not text:
        await message.reply('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n\n'
                            '–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å–ø–µ—Ä–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /search (–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)')
        return

    products = database.search_product(text)

    if not products:
        await message.reply('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', reply_markup=btns.main_menu())

    else:
        matching_products = []

        for product in products:

            product_name = product[0].lower() + product[0]
            search_terms = text.lower().split()  # –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

            if all(term in product_name for term in search_terms):
                matching_products.append(product)

        if not matching_products:
            await message.reply('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', reply_markup=btns.main_menu())

            return

        else:
            for product in matching_products:
                await dp.current_state(user=user_id).update_data(pr_name=product[0], pr_count=1, price=product[2])

                await bot.send_photo(user_id,
                                     photo=product[4],
                                     caption=f'{product[0]}\n\n–¶–µ–Ω–∞: {product[2]} $\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n {product[3]}',
                                     reply_markup=btns.send_admin_kb())



async def broadcast_message(message_text):

    conn = sqlite3.connect('base.db')
    cursor = conn.cursor()


    cursor.execute('SELECT id FROM users')
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        await bot.send_message(chat_id=user_id, text=message_text)

@dp.message_handler(commands=['broadcast'])
async def broadcast_command(message: types.Message):

    command_args = message.text.split(' ', maxsplit=1)
    if len(command_args) == 2:
        message_text = command_args[1]
        await broadcast_message(message_text)
        await message.reply(f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.')
    else:
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /broadcast message_text')


@dp.message_handler(state=states.Admin.get_status)
async def get_name(message, state=states.Admin.get_status):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':

        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        await states.Add_product.get_name.set()

    elif message.text == '–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞':

        user_id = message.from_user.id
        checker = database.check_user(user_id)

        if checker:

            await state.finish()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç',
                                 reply_markup=btns.main_menu())

        else:

            start_txt = f'{message.from_user.first_name}\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–æ—Ç–µ'
            start_reg = f'–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è!:'

            await message.answer(start_txt)
            await message.answer(start_reg)

            await states.Registration.getting_name_state.set()


@dp.message_handler(state=states.Add_product.get_name)
async def product_name(message, state=states.Add_product.get_name):
    name = message.text

    await state.update_data(name=name)
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ {name}:>>')
    await states.Add_product.get_id.set()


@dp.message_handler(state=states.Add_product.get_id)
async def get_id(message, state=states.Add_product.get_id):
    name = message.text

    await state.update_data(id=name)
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:')
    await states.Add_product.get_price.set()


@dp.message_handler(state=states.Add_product.get_price)
async def product_price(message, state=states.Add_product.get_price):
    price = message.text

    await state.update_data(price=price)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:>>')
    await states.Add_product.get_info.set()


@dp.message_handler(state=states.Add_product.get_info)
async def product_info1(message, state=states.Add_product.get_info):
    info_pr = message.text

    await state.update_data(description=info_pr)
    await message.answer('–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞>>')
    await states.Add_product.get_photo.set()


@dp.message_handler(content_types=['photo'], state=states.Add_product.get_photo)
async def product_photo(message, state=states.Add_product.get_photo):

    all_info = await state.get_data()
    name = all_info.get('name')
    prd_id = all_info.get('id')
    price = all_info.get('price')
    description = all_info.get('description')
    photo_id = all_info.get('picture')
    nt = all_info.get('notes')
    picture = message.photo[-2].file_id
    await state.update_data(photo=photo_id)

    database.add_products_to_db(name, prd_id, price, description, picture, nt)

    await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=btns.admin_kb())
    await states.Admin.get_status.set()


@dp.message_handler(state=Registration.getting_name_state)
async def get_name(message, state=Registration.getting_name_state):
    user_answer = message.text

    await state.update_data(name=user_answer)
    await message.answer('–ò–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!',
                         reply_markup=btns.phone_number_kb())

    await Registration.getting_phone_number.set()


@dp.message_handler(state=Registration.getting_phone_number, content_types=['text', 'contact'])
async def get_number(message: types.Message, state: FSMContext):
    global user_answer

    if message.content_type == 'text':
        user_answer = message.text

        if not user_answer.replace('+', '').isdigit():
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            return

    elif message.content_type == 'contact':
        user_answer = message.contact.phone_number

    await state.update_data(number=user_answer)
    await message.answer('–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', reply_markup=btns.main_menu())

    await Registration.getting_gender.set()


    all_info = await state.get_data()
    name = all_info.get('name')
    phone_number = all_info.get('number')
    latitude = all_info.get('latitude')
    longitude = all_info.get('longitude')
    gender = user_answer
    user_id = message.from_user.id
    database.add_user(user_id, name, phone_number, latitude, longitude, gender)

    await state.finish()


@dp.message_handler(state=GetProduct.getting_pr_name, content_types=['text'])
async def choose_count(message):
    user_answerr = message.text
    user_id = message.from_user.id


    user_data = await dp.current_state(user=user_id).get_data()
    category_id = user_data.get('category_id')

    actual_products = [i[0] for i in database.get_name_product(category_id)]

    if user_answerr == '–ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ',
                             reply_markup=btns.skoda_catalog())
        await dp.current_state(user=user_id).finish()


    elif user_answerr in actual_products:

        product_info = database.get_all_info_product(user_answerr)

        await dp.current_state(user=user_id).update_data(pr_name=user_answerr,
                                                         pr_count=1,
                                                         price=product_info[2]
                                                         )

        await bot.send_photo(user_id, photo=product_info[4],
                             caption=f'{product_info[0]}\n\n'
                                     f'–¶–µ–Ω–∞: {product_info[2]} $\n\n'
                                     f'–û–ø–∏—Å–∞–Ω–∏–µ:\n {product_info[3]}\n\n'
                                     f'@VW_Skoda_Bot',
                             reply_markup=btns.product_count())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£')

        await dp.current_state(user=user_id).update_data(user_product=message.text,
                                                         price=product_info[2])

        await states.GetProduct.getting_pr_count.set()



    elif user_answerr == '–ù–∞–∑–∞–¥ VW':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ',
                             reply_markup=btns.vw_catalog())
        await dp.current_state(user=user_id).finish()


@dp.message_handler(state=GetProduct.getting_pr_count)
async def text_message3(message, state=GetProduct.getting_pr_count):
    product_count = message.text
    user_data = await state.get_data()
    user_product = user_data.get('user_product')
    category_id = user_data.get('category_id')
    pr_price = float(user_data.get('price'))


    if product_count.isnumeric():
        database.add_pr_to_cart(message.from_user.id, user_product, pr_price, int(product_count))
        database.add_pr_to_cart2(message.from_user.id, user_product, pr_price, int(product_count))

        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É‚úÖ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.main_menu())
        await state.finish()


    else:
        await message.answer('–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥üîΩ',
                             reply_markup=btns.product_name_kb(category_id))
        await states.GetProduct.getting_pr_name.set()


@dp.message_handler(state=Cart.waiting_for_product)
async def cart_function(message, state=Cart.waiting_for_product):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == '–ù–∞–∑–∞–¥':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n'
                             '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ',
                             reply_markup=btns.main_menu())

        await dp.current_state(user=message.from_user.id).finish()


    elif user_answer == 'üÜë–û—á–∏—Å—Ç–∏—Ç—å':

        database.delete_from_cart(user_id)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞‚úÖ\n\n‚ùóÔ∏è‚ùóÔ∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥‚ùóÔ∏è‚ùóÔ∏è')

    if user_answer == '‚úÖ–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':

        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:

            result_answer = '–í–∞—à –∑–∞–∫–∞–∑::\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
                admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$'
        await message.answer('–†–∞–∑–¥–µ–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞üîΩ',
                             reply_markup=btns.confirmation_kb())


    elif user_answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':

        order_id = datetime.now().microsecond
        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:
            result_answer = f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order_id} :\n\n'
            admin_message = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ {order_id}:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
                admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$\n\n'
            admin_message += f' –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$\n\n'

            delivery_date = datetime.now() + timedelta(days=14)
            result_answer += f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date.strftime("%d.%m.%Y")}'
            admin_message += f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date.strftime("%d.%m.%Y")}'

            await message.answer(result_answer, reply_markup=btns.main_menu())
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n\n')
            await state.finish()
            await bot.send_message(5928000362, admin_message)
            database.delete_from_cart(user_id)


@dp.message_handler(state=Order.waiting_accept)
async def accept_order(message):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == '–ù–∞–∑–∞–¥':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ',
                             reply_markup=btns.main_menu())
        await dp.current_state(user=message.from_user.id).finish()


    elif user_answer == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        order_id = datetime.now().microsecond
        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:
            result_answer = f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order_id}:\n\n'
            admin_message = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ {order_id}:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                total_price += i[3]

            result_answer += f'\n–ò—Ç–æ–≥: {total_price:.2f}$\n\n'
            admin_message += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$\n\n'

            delivery_date = datetime.now() + timedelta(days=14)
            result_answer += f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date.strftime("%d.%m.%Y")}'
            admin_message += f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date.strftime("%d.%m.%Y")}'

            await message.answer(result_answer, reply_markup=btns.main_menu())
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n\n')
            await bot.send_message(5928000362, admin_message)
            await dp.current_state(user=message.from_user.id).finish()
            database.delete_from_cart(user_id)



@dp.message_handler(state=Settings.set_setting, content_types=['text'])
async def set_name(message):
    user_answer = message.text
    user_id = message.from_user.id
    try:
        match user_answer:
            case '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è')
                await Settings.set_name.set()

            case '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä':
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä')
                await Settings.set_number.set()

    except Exception as e:
        print(e)
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')

    try:
        match user_answer:
            case '–ù–ê–ó–ê–î':
                await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=btns.main_menu())
                await dp.current_state(user=user_id).reset_state()

    except Exception as e:
        print(e)
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')


@dp.message_handler(state=states.Settings.set_name)
async def change_name_db(message, state=Settings.set_name):
    user_answer = message.text

    await state.update_data(name=user_answer)

    ch_name = await state.get_data()
    user_id = message.from_user.id
    database.change_name(user_id, ch_name)
    await state.finish()
    await message.answer('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"', reply_markup=btns.main_menu())


@dp.message_handler(state=Settings.set_number)
async def change_number_db(message, state=Settings.set_number):
    user_answer = message.text

    await state.update_data(phone_number=user_answer)

    ch_number = await state.get_data()
    user_id = message.from_user.id
    database.change_number(user_id, ch_number)
    await state.finish()
    await message.answer('–ù–æ–º–µ—Ä –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=btns.main_menu())



@dp.message_handler(content_types=['text'])
async def main_menu(message):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == 'üõí–ö–æ—Ä–∑–∏–Ω–∞':
        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:
            result_answer = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞üóë:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$'

            await message.answer(result_answer, reply_markup=btns.cart_kb())
            await Cart.waiting_for_product.set()

        else:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüóë')

    if user_answer == 'SKODA':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ',
                             reply_markup=btns.skoda_catalog())


    elif user_answer == 'üîç–ü–æ–∏—Å–∫':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=btns.ReplyKeyboardRemove())
        await states.Search.search_product.set()


    elif user_answer == 'üë§–ü—Ä–æ—Ñ–∏–ª—å':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=btns.change_data_kb())
        await states.Settings.set_setting.set()


    elif user_answer == 'üîô–ù–∞–∑–∞–¥':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ',
                             reply_markup=btns.main_menu())
        await dp.current_state(user=user_id).finish()


    elif user_answer == '–•–û–î–û–í–ê–Ø –ß–ê–°–¢–¨':
        await dp.current_state(user=user_id).update_data(category_id=15)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.auto_skoda_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–≠–õ–ï–ö–¢–†–ò–ö–ê':
        await dp.current_state(user=user_id).update_data(category_id=17)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.electrics_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–ú–û–¢–û–†–ù–ê–Ø –ß–ê–°–¢–¨':
        await dp.current_state(user=user_id).update_data(category_id=16)
        await message.answer('–°–∫–æ—Ä–æ...',
                             reply_markup=btns.motor_skoda_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–ê–ö–°–ï–°–°–£–ê–†–´':
        await dp.current_state(user=user_id).update_data(category_id=22)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.accessories_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–§–ò–õ–¨–¢–†–ê':
        await dp.current_state(user=user_id).update_data(category_id=44)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.filter_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–ê–í–¢–û–•–ò–ú–ò–Ø':
        await dp.current_state(user=user_id).update_data(category_id=33)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.chemical_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–û–°–¢–ê–õ–¨–ù–û–ï':
        await dp.current_state(user=user_id).update_data(category_id=55)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.other_kb())
        await states.GetProduct.getting_pr_name.set()

    if user_answer == 'VOLKSWAGEN':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ',
                             reply_markup=btns.vw_catalog())


    elif user_answer == '–≠–õ–ï–ö–¢–†–ò–ö–ê VW':
        await dp.current_state(user=user_id).update_data(category_id=77)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.electrics_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–ê–ö–°–ï–°–°–£–ê–†–´ VW':
        await dp.current_state(user=user_id).update_data(category_id=33)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.vw_accessories_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–•–û–î–û–í–ê–Ø –ß–ê–°–¢–¨ VW':
        await dp.current_state(user=user_id).update_data(category_id=11)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.vw_auto_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–ú–û–¢–û–†–ù–ê–Ø –ß–ê–°–¢–¨ VW':
        await dp.current_state(user=user_id).update_data(category_id=22)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.vw_motor_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–§–ò–õ–¨–¢–†–ê VW':
        await dp.current_state(user=user_id).update_data(category_id=55)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.vw_filter_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–ê–í–¢–û–•–ò–ú–ò–Ø VW':
        await dp.current_state(user=user_id).update_data(category_id=44)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.vw_chemical_kb())
        await states.GetProduct.getting_pr_name.set()


    elif user_answer == '–û–°–¢–ê–õ–¨–ù–û–ï VW':
        await dp.current_state(user=user_id).update_data(category_id=66)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ',
                             reply_markup=btns.vw_other_kb())
        await states.GetProduct.getting_pr_name.set()


    if user_answer == '‚óÄÔ∏è–ù–∞–∑–∞–¥':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ',
                             reply_markup=btns.main_menu())
        await dp.current_state(user=user_id).finish()


    elif user_answer == '–û –Ω–∞—Å':
        await message.answer(about)


    elif user_answer == '‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await message.answer(contacts)

    elif user_answer == 'üìÑ–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤':
        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:

            result_answer = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$'
            admin_message += f' –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$'

            await message.answer(result_answer,
                                 reply_markup=btns.order_kb())

            await Order.waiting_accept.set()

        else:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüóë\n\n'
                                 '–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ')


@dp.callback_query_handler(lambda call: call.data in ['increment', 'decrement', 'to_cart', 'back'],
                           state=states.GetProduct.getting_pr_count)
async def get_user_product_count(call):

    user_id = call.message.chat.id


    if call.data == 'increment':
        user_data = await dp.current_state(user=user_id).get_data()
        actual_count = user_data['pr_count']


        await dp.current_state(user=user_id).update_data(pr_count=user_data['pr_count'] + 1)


        await bot.edit_message_reply_markup(chat_id=user_id,
                                            message_id=call.message.message_id,
                                            reply_markup=btns.choose_product_count('increment', actual_count))


    elif call.data == 'decrement':
        user_data = await dp.current_state(user=user_id).get_data()
        actual_count = user_data['pr_count']


        await dp.current_state(user=user_id).update_data(pr_count=user_data['pr_count'] - 1)


        await bot.edit_message_reply_markup(chat_id=user_id,
                                            message_id=call.message.message_id,
                                            reply_markup=btns.choose_product_count
                                            ('decrement', actual_count))



    elif call.data == 'back':

        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é',
                                  reply_markup=btns.skoda_catalog())
        await dp.current_state(user=user_id).finish()


    elif call.data == 'to_cart':

        user_data = await dp.current_state(user=user_id).get_data()
        product_count = user_data['pr_count']
        user_product = user_data['pr_name']
        price = user_data['price']


        database.add_pr_to_cart(user_id, user_product, price, product_count)


        await call.message.delete()
        await call.message.answer('–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?',
                                  reply_markup=btns.main_menu())

        await dp.current_state(user=user_id).finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
